#include<queue>                               //软2114 刘诗煜 
#include<string>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
//const int N=64;

class Node
{
public:
    int w;                                    //权重
    Node* leftchild,*rightchild;
    string Huffmanstr;                        //叶子结点编码，非叶子结点则为\0
    char c;                                   //叶子结点字母，非叶子结点则为\0
    Node(int n=0)
    {
        w = n;
        leftchild = NULL;
        rightchild = NULL;
        Huffmanstr="\0";
        c='\0';
    }
    bool operator < (const Node &p) const{return w > p.w;} //此处重载运算符时故意反号 使优先队列变为最小堆
    bool operator > (const Node &p) const{return w < p.w;}
    bool isleaf()                                //是否是叶子节点
    {
        if(leftchild==NULL && rightchild==NULL) return true;
        else return false;
    }
};

class Huffmantree
{
public:
    Node* root;
    Huffmantree(){root=NULL;}
    void merge(Node *fst,Node *snd,Node *p)   //将两个节点由一个parent连接起来
    {
        p->rightchild=fst;
        p->leftchild=snd;
        p->w=fst->w+snd->w;                   //此处使用指针，如果用的是结点的引用，会导致所结点左右孩子都是同一组左右孩子，导致出错
    }
    void build(int n,int *fre,char *cha)      //建立霍夫曼树
    {
        priority_queue<Node>pq;               //优先队列是个最大堆
        Node *parent,*fchild,*schild;
        Node *nodelist = new Node[n];
        int i=0;
        for(i=0;i<n;i++)                      //先把叶子结点放入优先队列
        {
            nodelist[i].w=fre[i];             //赋值，包含权重和叶子结点对应的字母
            nodelist[i].c=cha[i];
            nodelist[i].leftchild=nodelist[i].rightchild=NULL;  //啥也不连
            pq.push(nodelist[i]);             //放入优先队列
        }
        for(i=0;i<n-1;i++)                    //建树
        {
            parent = new Node;
            fchild = new Node;
            schild = new Node;
            *fchild = pq.top();pq.pop();      //取优先队列头两个节点
            *schild = pq.top();pq.pop();
            merge(fchild,schild,parent);      //建立一个v形结构再放回去
            pq.push(*parent);
        }
        root = parent;
        delete []nodelist;
    }
    void encode(Node *r,string st)            //递归，到达叶子结点，编码记录在叶子结点中
    {
        if(r->isleaf())                       //如果是叶子结点，那么这个结点必定保存了字母信息
        {
            r->Huffmanstr=st;                 //叶子结点的编码即这个字符串
            return;
        }
        encode(r->leftchild,st+"0");          //不是叶子结点，递归调用编码函数，并将编码进行增加，左孩子，字符串+"0"，右孩子，字符串+"1"
        encode(r->rightchild,st+"1");         //初始的字符串为"\0"
    }
    void showcode(Node *r)
    {
        if(r->isleaf())
        {
            cout<<"字符："<<r->c<<" 权重："<<r->w<<" 哈夫曼编码："<<r->Huffmanstr<<endl;
            return;
        }
        showcode(r->leftchild);
        showcode(r->rightchild);
    }
    void decode(const string &de)             //译码函数
    {
        Node *tmp=root;
        int len=de.length(),i=0;
        for(i=0;i<len;i++)                    //遍历字符串
        {
            if(de[i]=='0')tmp=tmp->leftchild; //'0'往左走，'1'往右走
            else if(de[i]=='1')tmp=tmp->rightchild;
            else continue;                    //遇到非'0'和'1'，自动忽略，也可以是其他的操作，比如报错
            if(tmp->isleaf())                 //每次跳转之后判断结点是否为叶子结点，是则输出字母，并将指针移回root
            {
                cout<<tmp->c;
                tmp=root;
            }
        }
        cout<<endl;
        if(tmp!=root) cout<<"编码存在冗余序列"<<endl;//判断编码是否冗余
    }
};

int main()
{
    int n=6;

    cout<<"在字符串AFTER DATA EAR ARE ART AREA中，字符集为 A，E，R，T，F，D ，各字母出现次数为 8，4，5，3，1，1，现对其进行编码"<<endl;
    char ch[n]={'A','E','R','T','F','D'};
	int fch[n]={8,4,5,3,1,1};
    Huffmantree tr;
    tr.build(n,fch,ch);
    string st0="\0";
    tr.encode(tr.root,st0);
    tr.showcode(tr.root);

    string dec;
    cout<<"输入编码字符串：";
    cin>>dec;

    cout<<"解码完成，结果如下："<<endl;
    tr.decode(dec);
    return 0;
}
//AFTERAREA
//000111010111000101100
//0001110101110001011001
//00011101011100010110011

#include<iostream>
using namespace std;

template <class T>
class MaxHeap
{
private:
	T* heapArray;               		//存放堆数据的数组
	int CurrentSize;             		//当前堆中元素数目
	int MaxSize;                		//堆所能容纳的最大元素数目
public:
	MaxHeap(T* array, int num, int max) {
		this->heapArray = new T[num];
		for (int i = 0; i < num; i++) {
			this->heapArray[i] = array[i];
		}
		this->CurrentSize = num;
		this->MaxSize = max;
	}
	virtual ~MaxHeap() {};    		//析构函数
T* getMaxHeap()		//获得最大堆元素，也即是第一个 
{
	return heapArray;
}
int getCurrSize()					//返回当前元素数目 
{
	return CurrentSize;
}
bool isLeaf(int pos) const			//如果是叶结点，返回TRUE
{
	if (2 * pos + 1 > CurrentSize - 1)
		return true;
	else
		return false;
} 
int leftchild(int pos) const		//返回左孩子位置
{
	int leftchild;
	if (pos*2+1<CurrentSize)
	{
		leftchild = 2 * pos + 1;
		cout << pos << "号结点的左孩子为" << leftchild << "号" << endl;
	}
	else
		cout << pos << "号结点是叶子结点，没有左孩子" << endl;
	return leftchild;
} 
int rightchild(int pos) const		//返回右孩子位置
{
	int rightchild = 2 * pos + 2;
	if (rightchild < CurrentSize)
		cout << pos << "号结点的右孩子为" << rightchild << "号" << endl;
	else
		cout << pos << "号结点没有右孩子" << endl;

	return rightchild;
} 
int parent(int pos) const   		//返回父结点位置
{
	return (pos - 1) / 2;
}
bool Remove(int pos, T& node)		//删除给定下标的元素,pos与node是相对应的 
{
	CurrentSize--;
	T temp = node;
	heapArray[pos] = heapArray[CurrentSize];
	heapArray[CurrentSize] = temp;
	BuildHeap();
	return true;
}
bool Insert(const T& newNode)		//向堆中插入新元素newNode
{
	heapArray[CurrentSize]=newNode;
	SiftUp(CurrentSize);
	CurrentSize++;
	return true;
}
void MoveMax()                  	//从堆顶移动最大值到尾部
{
	T temp = heapArray[0];
	heapArray[0] = heapArray[CurrentSize-1];
	heapArray[CurrentSize-1] = temp;
}
T& RemoveMax()                  	//从堆顶删除最大值
{
	MoveMax();
	BuildHeap();
}
void BuildHeap()
{
	for (int i = parent(CurrentSize); i >= 0; i--)
		SiftDown(i);
} 
void SiftDown(int left)    			//筛选法函数，参数left表示开始处理的数组下标
{
    if(isLeaf(left))
        return;
    else
    {
        int MaxChild;
        T Temp;
        for(MaxChild = left*2+1;MaxChild < CurrentSize;MaxChild = MaxChild*2+1)
        {
            if(MaxChild+1<CurrentSize && heapArray[MaxChild] < heapArray[MaxChild+1])
                MaxChild++;		//该结点有右孩子且右孩子的关键码大于左孩子关键码时，j指向右子结点 
            if(heapArray[MaxChild] < heapArray[left])
                break;
            else
            {
                Temp = heapArray[left];
                heapArray[left] = heapArray[MaxChild];
                heapArray[MaxChild] = Temp;
                left = MaxChild;
            }
        }
    }
	/*int i = left;            			//标识父结点
	int j = 2 * i + 1;           		//标识左子结点
	T temp = heapArray[i];     		//保存父结点的关键码
									//过筛 
	while (j < CurrentSize)			//从上往下遍历 
	{
		if ((j+1 <= CurrentSize) && (heapArray[j] < heapArray[j + 1]))		//该结点有有孩子且右孩子的关键码大于左孩子关键码时，j指向右子结点 
			j++;
		
		if (temp < heapArray[j])			//该结点小于左右孩子中比较大的那个时 
		{                    
			heapArray[i] = heapArray[j]; 
			i = j;						 //可能会被破坏，循环处理 
			j = 2 * j + 1;               
		}
		else break;
	}
	heapArray[i] = temp;*/
}
void SiftUp(int pos)			//插入后的处理，从position向上开始调整，使序列成为堆
{
    int Parent;
    T Temp;
    for(;pos>0;pos=parent(pos))
    {
        Parent = parent(pos);
        if(heapArray[Parent]<heapArray[pos])
        {
            Temp = heapArray[pos];
            heapArray[pos] = heapArray[Parent];
            heapArray[Parent] = Temp;
        }
    }
	/*int i = position;           //标识插入的新结点
	int j = parent(position);   //标识父结点
	T temp = heapArray[i];     	//保存新结点的关键码

	while (j >= 0)
	{
		if (temp > heapArray[j])
		{                             //该结点的关键码大于父结点的值时
			heapArray[i] = heapArray[j];	//交换对应值
			i = j;
			j = parent(i);              //向上继续判断是否满足最大堆的性质
		}
		else break;
	}
	heapArray[i] = temp;*/
}
};
int main()
{
	int a[10] = { 20,12,35,15,10,80,30,17,2,1 };
	MaxHeap<int> maxhead(a, 10, 20);
	maxhead.BuildHeap();									//建堆 
	int *b = maxhead.getMaxHeap();		//获取最大也即第一个元素 
	for (int i = 0; i < maxhead.getCurrSize(); i++) {		//输出 
		cout << b[i] << ' ';
	}
	cout <<"\n"<< endl;
	
	cout<<"插入元素25后："<<endl;
	maxhead.Insert(25);		//插入后再输出 
	int *c = maxhead.getMaxHeap();
	for (int i = 0; i < maxhead.getCurrSize(); i++) {
		cout << c[i] << ' ';
	}
	cout <<"\n"<< endl;
	
	cout<<"删除第2号元素后："<<endl;
	maxhead.Remove(1, c[1]);								//删除元素 
	int *d = maxhead.getMaxHeap();							//删除后输出 
	for (int i = 0; i < maxhead.getCurrSize(); i++) {
		cout << d[i] << ' ';
	}
	cout<<endl; 

	return 0;
}
/*
	cout<<endl;cout<<endl;
	cout<<endl; cout<<endl;
	if (maxhead.isLeaf(3))									//判断叶子结点 
		cout << "是叶结点\n" << endl;
	else
		cout << "不是叶结点\n" << endl;
	
	maxhead.leftchild(3);	cout<<endl; 
	maxhead.rightchild(3);	cout<<endl; 
	maxhead.parent(3);		cout<<endl; 
	
*/

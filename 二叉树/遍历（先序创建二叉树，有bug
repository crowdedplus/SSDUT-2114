#include<iostream>
#include<stack>
#include<queue>
#include<string>
#include<cstring>
using namespace std;
//二叉树节点 
template <class T>
class BinaryTreeNode{
private:
	T element;                      		//结点的数据域
	BinaryTreeNode<T> * leftChild;   		//结点的左孩子结点
	BinaryTreeNode<T> * rightChild;   		//结点的右孩子结点
public:
	//默认构造函数
	BinaryTreeNode(){  	
	element = 0;
    leftChild = rightChild = NULL;		
	}
	//给定数据域的值的构造函数
	BinaryTreeNode(const T& ele){  
    element = ele;
    leftChild = rightChild = NULL;		
	}			
	//给定数据值和左右孩子结点的构造函数
	BinaryTreeNode(const T& ele, BinaryTreeNode<T> * l, BinaryTreeNode<T> * r){ 
    element = ele;
    leftChild = l;
    rightChild = r;		
	}			
	BinaryTreeNode<T> * getLeftChild() const;		//返回该结点的左孩子结点
	BinaryTreeNode<T> * getRightChild() const;		//返回该结点的右孩子结点
	void setLeftChild(BinaryTreeNode<T> * l);		//设置该结点的左孩子结点
	void setRightChild(BinaryTreeNode<T> * r);		//设置该结点的右孩子结点
	void createLeftChild();			//创建该结点的左孩子结点
	void createRightChild();		//创建该结点的右孩子结点
	T getValue() const;             //返回该结点的数据值
	void setValue(const T& val);    //设置该结点的数据域的值
	bool isLeaf() const;  			//判断该结点是否是叶子结点，若是，则返回true
};

template<class T>
BinaryTreeNode<T> * BinaryTreeNode<T>::getLeftChild() const
{
    return leftChild;
}
template<class T>
BinaryTreeNode<T> * BinaryTreeNode<T>::getRightChild() const
{
    return rightChild;
}
template<class T>
void BinaryTreeNode<T>::setLeftChild(BinaryTreeNode<T> * l)
{
    leftChild = l;
}
template<class T>
void BinaryTreeNode<T>::setRightChild(BinaryTreeNode<T> * r)
{
    rightChild = r;
}
template<class T>
void BinaryTreeNode<T>::createLeftChild()
{
    leftChild = new BinaryTreeNode<T>;
}
template<class T>
void BinaryTreeNode<T>::createRightChild()
{
    rightChild = new BinaryTreeNode<T>;
}
template<class T>
T BinaryTreeNode<T>::getValue() const
{
    return element;
}
template<class T>
void BinaryTreeNode<T>::setValue(const T& val)
{
    element = val;
}
template<class T>
bool BinaryTreeNode<T>::isLeaf() const
{
    if(leftChild == NULL && rightChild == NULL)
        return true;
    else
        return false;
}
//********************************************************************************************/
//二叉树 
template <class T>
class BinaryTree{
private:
	BinaryTreeNode<T> * root;				//二叉树根结点
public:
	BinaryTree();              				//默认构造函数
	~BinaryTree();                  		//析构函数
	bool isEmpty() const;           		//判断二叉树是否为空树
	BinaryTreeNode<T> * getRoot() const;	//返回二叉树的根结点
	BinaryTreeNode<T> * getParent(BinaryTreeNode<T> * current) const;
                                              		//返回current结点的父结点
	BinaryTreeNode<T> * getLeftSibling(BinaryTreeNode<T>  * current) const;
	                                          	//返回current结点的左兄弟
	BinaryTreeNode<T> * getRightSibling(BinaryTreeNode<T> * current) const;
	                                          	//返回current结点的右兄弟
	                                          	
	void breadthFirstOrder(BinaryTreeNode<T> * root);
	                               		//广度优先遍历以root为根结点的子树
	void preOrder(BinaryTreeNode<T> * root);
										//先序遍历以root为根结点的子树
	void inOrder(BinaryTreeNode<T>  * root);
										//中序遍历以root为根结点的子树
	void postOrder(BinaryTreeNode<T>  * root);
										//后序遍历以root为根结点的子树
										
    void PreOrderWithoutRecusion(BinaryTreeNode<T> * root);
                                    //非递归先序遍历以root为根结点的子树
    void InOrderWithoutRecusion(BinaryTreeNode<T> * root);
                                    //非递归中序遍历以root为根结点的子树
    void PostOrderWithoutRecusion(BinaryTreeNode<T> * root);
                                    //非递归后序遍历以root为根结点的子树
                                   
	void levelOrder(BinaryTreeNode<T> * root);
                    					//按层次遍历以root为根结点的子树
	void deleteBinaryTree(BinaryTreeNode<T> * root);
	                    				//删除以root为根结点的子树
	void visit(BinaryTreeNode<T> *t)const ;   //访问当前节点
	void create(string &n);
};

template <class T>
BinaryTree<T>::BinaryTree()
{
    root = NULL;
}
template <class T>
BinaryTree<T>::~BinaryTree()
{
    //deleteBinaryTree(root);
}
template <class T>
bool BinaryTree<T>::isEmpty() const
{
    if(root == NULL)
        return true;
    else
        return false;
}
template <class T>
BinaryTreeNode<T> * BinaryTree<T>::getRoot() const
{
    return root;
}
template <class T>
void BinaryTree<T>::visit(BinaryTreeNode<T> *t) const
{
	cout<<t->getValue()<<"  ";
}

//广度优先遍历以root为根结点的子树

template <class T>
void BinaryTree<T>::breadthFirstOrder(BinaryTreeNode<T> * root)		
{
	queue< BinaryTreeNode<T> *> nodeQueue;		//队列将要访问的结点 
	BinaryTreeNode<T> *pointer=root; 
	if(pointer!=NULL)
		nodeQueue.push(pointer);
	while(!nodeQueue.empty()){
		pointer=nodeQueue.front();
		visit(pointer);
		if(pointer->getLeftChild())
			nodeQueue.push(pointer->getLeftChild()) ;
		if(pointer->getRightChild() )
			nodeQueue.push(pointer->getRightChild());
		nodeQueue.pop();
		pointer=nodeQueue.front();
	}
// 	queue<BinaryTreeNode<T> *> nodeQueue;//用队列来存放将要访问的结点
//	BinaryTreeNode<T> * pointer = root;
//
//	if(pointer)                          //如果根结点非空，将根结点移入队列
//		nodeQueue.push(pointer);
//	while(!nodeQueue.empty())
//	{
//		pointer = nodeQueue.front(); 	//读取队首结点
//		visit(pointer);	                 	//访问当前结点
//		nodeQueue.pop();               	//将访问过的结点移出队列
//		if(pointer->getLeftChild())
//			nodeQueue.push(pointer->getLeftChild());
//		if(pointer->getRightChild())
//			nodeQueue.push(pointer->getRightChild());
//		                       	//将访问过的结点的左右孩子结点依次加入到队尾
//	}
}

template <class T>	                               		
void BinaryTree<T>::preOrder(BinaryTreeNode<T> * root)//先序遍历以root为根结点的子树
{
	if(root!=NULL)
	{
		visit(root);
		preOrder(root->getLeftChild());
		preOrder(root->getRightChild());
	} 
}
template <class T>
void BinaryTree<T>::inOrder(BinaryTreeNode<T>  * root)//中序遍历以root为根结点的子树
{
	if(root!=NULL)
	{
		inOrder(root->getLeftChild());
		visit(root);
		inOrder(root->getRightChild());
	} 
}
template <class T>
void BinaryTree<T>::postOrder(BinaryTreeNode<T>  * root)	//后序遍历以root为根结点的子树
{
	if(root!=NULL)
	{
		postOrder(root->getLeftChild());
		postOrder(root->getRightChild());
		visit(root);
	} 
} 



template <class T>
void BinaryTree<T>::PreOrderWithoutRecusion(BinaryTreeNode<T> * root)
{
    stack<BinaryTreeNode<T> * > nodeStack;   	//存放待访问的结点的栈
  	BinaryTreeNode<T> * pointer = root;      	//保存根结点

	while(!nodeStack.empty() || pointer)	 	//栈为空时遍历结束
	{
		if(pointer)
        {
		  	  visit(pointer);		          	//访问当前结点
			  if(pointer->getRightChild() != NULL)
					nodeStack.push(pointer->getRightChild());
			                           	//当前访问结点的右子树的根结点入栈
			  pointer = pointer->getLeftChild();		//转向访问其左子树
		}
		else
		{	        			 	//左子树访问完毕，转向访问右子树
			  pointer = nodeStack.top();		//读取栈顶待访问的结点
			  nodeStack.pop();                  	//删除栈顶结点
		}
	}
}
template <class T>
void BinaryTree<T>::InOrderWithoutRecusion(BinaryTreeNode<T> * root)
{
    stack<BinaryTreeNode<T> * > nodeStack; 		//存储待访问结点
  	BinaryTreeNode<T> * pointer = root;		  	//保存根结点

	while(!nodeStack.empty() || pointer)     	//栈为空时遍历结束
	{
		if(pointer)
        {
			  nodeStack.push(pointer);				//当前结点入栈
			  pointer = pointer->getLeftChild();   	//转向访问其左孩子
		}
		else
        {        						//左子树访问完毕，转向访问右子树
			  pointer = nodeStack.top();		//读取栈顶待访问的结点
		  	  visit(pointer);		       		//访问当前结点
			  pointer = pointer->getRightChild();  	//转向其右孩子
			  nodeStack.pop();				  	//删除栈顶结点
		}
	}
}

template <class T>
void BinaryTree<T>::PostOrderWithoutRecusion(BinaryTreeNode<T> * root)
{
    stack<BinaryTreeNode<T> * > nodeStack;	//存储待访问结点
  	BinaryTreeNode<T> * pointer = root;		//保存根结点
	BinaryTreeNode<T> * pre = root;         //保存前一个被访问的结点

	while(pointer)
    {
		for( ; pointer->getLeftChild() != NULL; pointer = pointer->getLeftChild())
			nodeStack.push(pointer);     	//向左搜索

		while(pointer != NULL && (pointer->getRightChild() == NULL || pointer->getRightChild() == pre))
        {
			        //当前结点没有右孩子或者右孩子刚被访问过,则访问该结点
			visit(pointer);
			pre = pointer;            		//记录刚被访问过的结点
			if(nodeStack.empty())
				return;
			pointer = nodeStack.top();   	//取栈顶结点
			nodeStack.pop();
		}
		
		nodeStack.push(pointer);
		pointer = pointer->getRightChild();  	//转向当前结点的右子树，然后右子树空，for循环跳过 
	}
}



template <class T>
void BinaryTree<T>::deleteBinaryTree(BinaryTreeNode<T> * root)		//删除以root为根结点的子树
{
	queue< BinaryTreeNode<T> *> nodeQueue;		//队列将要访问的结点 
	BinaryTreeNode<T> *pointer=root; 
	if(pointer!=NULL)
		nodeQueue.push(pointer);
	while(!nodeQueue.empty()){
		pointer=nodeQueue.front();
		nodeQueue.push(pointer);
		if(pointer->getLeftChild())
			nodeQueue.push(pointer->getLeftChild()) ;
		if(pointer->getRightChild() )
			nodeQueue.push(pointer->getRightChild());
		delete pointer;
	}
} 
template <class T>
void BinaryTree<T>::create(string &n){
    char *c=new char(n.size()+1); 
    strcpy(c,n.c_str());
    	
    BinaryTreeNode<T> *q;
    root= new BinaryTreeNode<T>;

	queue< BinaryTreeNode<T> *> nodeQueue;		//队列将要访问的结点 
	BinaryTreeNode<T> *pointer=root; 
	
	nodeQueue.push(pointer);
	pointer->setValue(c[0]);

	int i=1;
	while(c[i]!='\0'){
		if(c[i]!='\0')
		{
			pointer->createLeftChild();
			nodeQueue.push(pointer->getLeftChild());
			q=pointer->getLeftChild();
			q->setValue(c[i]);
			i++;

			if(c[i]!='\0')
			{
				pointer->createRightChild();
				nodeQueue.push(pointer->getRightChild());
				q=pointer->getRightChild();
				q->setValue(c[i]); 
				i++;
			}
		}
	
		nodeQueue.pop();
		pointer=nodeQueue.front();
	}
}

int main()
{
    BinaryTree<char> tree;
    string m;
    cout<<"请输入创建的二叉树序列："<<endl;
    cin>>m;		//ABDFGCEH
    tree.create(m);

	
    cout<<"该二叉树广度优先遍历序列为："<<endl;					//ABCDEFGH
    tree.breadthFirstOrder(tree.getRoot());
    
    cout<<"\n\n该二叉树递归前序遍历序列为："<<endl;
    tree.preOrder(tree.getRoot());
    cout<<"\n该二叉树非递归前序遍历序列为："<<endl;
    tree.PreOrderWithoutRecusion(tree.getRoot());				//ABCDEFG
    
    cout<<"\n\n该二叉树递归中序遍历序列为："<<endl;
    tree.inOrder(tree.getRoot());
    cout<<"\n该二叉树非递归中序遍历序列为："<<endl;
    tree.InOrderWithoutRecusion(tree.getRoot());
    
    cout<<"\n\n该二叉树递归后序遍历序列为："<<endl;
    tree.postOrder(tree.getRoot());
    cout<<"\n该二叉树非递归后序遍历序列为："<<endl;
    tree.PostOrderWithoutRecusion(tree.getRoot());
    return 0;
}
